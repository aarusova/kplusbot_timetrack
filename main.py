import logging
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters, CallbackContext
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = "7635522928:AAEHZ8LkGtxuHAw87qaiBIstnhPLQq1HBbs"
SCOPES = ['https://www.googleapis.com/auth/spreadsheets']

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_sessions = {}

def start(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    user_sessions[user_id] = {'spreadsheet_id': None, 'current_task': None}
    
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ Google-—Ç–∞–±–ª–∏—Ü—É –¥–ª—è —É—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É?", callback_data="help_link")]
        ])
    )

def handle_spreadsheet_link(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É"""
    user_id = update.effective_user.id
    text = update.message.text
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–∞–±–ª–∏—Ü—ã –∏–∑ —Å—Å—ã–ª–∫–∏
    if "docs.google.com/spreadsheets" in text:
        spreadsheet_id = text.split('/d/')[1].split('/')[0]
        user_sessions[user_id]['spreadsheet_id'] = spreadsheet_id
        
        update.message.reply_text(
            "–¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
            reply_markup=main_menu_keyboard()
        )
    else:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ Google-—Ç–∞–±–ª–∏—Ü—É")

def main_menu_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∑–∞–¥–∞—á—É", callback_data="start_task")],
        [InlineKeyboardButton("–û—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é", callback_data="weekly_report")],
        [InlineKeyboardButton("–û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü", callback_data="monthly_report")]
    ])

def start_task(update: Update, context: CallbackContext):
    """–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
    query = update.callback_query
    user_id = query.from_user.id
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
    now = datetime.now()
    user_sessions[user_id]['current_task'] = {
        'date': now.strftime("%Y-%m-%d"),
        'start_time': now.strftime("%H:%M:%S"),
        'task': None,
        'tags': []
    }
    
    query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    return "TASK_DESCRIPTION"

def task_description(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    user_id = update.effective_user.id
    user_sessions[user_id]['current_task']['task'] = update.message.text
    
    update.message.reply_text(
        "–ó–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥–∏", callback_data="add_tags")],
            [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="end_task")]
        ])
    )
    return "TASK_ACTIONS"

def end_task(update: Update, context: CallbackContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏ –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É"""
    query = update.callback_query
    user_id = query.from_user.id
    task_data = user_sessions[user_id]['current_task']
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    end_time = datetime.now()
    start_time = datetime.strptime(task_data['start_time'], "%H:%M:%S")
    duration = end_time - start_time
    hours = round(duration.total_seconds() / 3600, 2)
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏
    row = [
        task_data['date'],
        task_data['start_time'],
        end_time.strftime("%H:%M:%S"),
        hours,
        ", ".join(task_data['tags']),
        task_data['task']
    ]
    
    # –ó–∞–ø–∏—Å—å –≤ Google Sheets
    try:
        credentials = Credentials.from_service_account_file('credentials.json', scopes=SCOPES)
        service = build('sheets', 'v4', credentials=credentials)
        
        sheet = service.spreadsheets()
        sheet.values().append(
            spreadsheetId=user_sessions[user_id]['spreadsheet_id'],
            range="A1:F1",
            valueInputOption="USER_ENTERED",
            insertDataOption="INSERT_ROWS",
            body={"values": [row]}
        ).execute()
        
        query.edit_message_text(f"‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–ó–∞—Ç—Ä–∞—á–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–∏: {hours} —á.")
    except Exception as e:
        query.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É: {str(e)}")
    
    return -1

def generate_report(update: Update, context: CallbackContext, days: int):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
    query = update.callback_query
    user_id = query.from_user.id
    
    try:
        credentials = Credentials.from_service_account_file('credentials.json', scopes=SCOPES)
        service = build('sheets', 'v4', credentials=credentials)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        result = service.spreadsheets().values().get(
            spreadsheetId=user_sessions[user_id]['spreadsheet_id'],
            range="A:F"
        ).execute()
        
        rows = result.get('values', [])
        end_date = datetime.now()
        start_date = end_date - timedelta(days=days)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        report_data = []
        total_hours = 0
        tags_summary = {}
        tasks_summary = {}
        
        for row in rows:
            if len(row) < 6:
                continue
            
            try:
                row_date = datetime.strptime(row[0], "%Y-%m-%d")
                if start_date <= row_date <= end_date:
                    report_data.append(row)
                    hours = float(row[3])
                    total_hours += hours
                    
                    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–µ–≥–∞–º
                    tags = row[4].split(', ') if len(row) > 4 and row[4] else ["–ë–µ–∑ —Ç–µ–≥–∞"]
                    for tag in tags:
                        tags_summary[tag] = tags_summary.get(tag, 0) + hours
                    
                    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∑–∞–¥–∞—á–∞–º
                    task = row[5] if len(row) > 5 else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                    tasks_summary[task] = tasks_summary.get(task, 0) + hours
            except:
                continue
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report = f"üìä –û—Ç—á–µ—Ç –∑–∞ {days} –¥–Ω–µ–π:\n"
        report += f"–í—Å–µ–≥–æ —á–∞—Å–æ–≤: {round(total_hours, 2)}\n\n"
        
        report += "üîñ –ü–æ —Ç–µ–≥–∞–º:\n"
        for tag, hours in tags_summary.items():
            report += f"- {tag}: {round(hours, 2)} —á.\n"
        
        report += "\nüìù –ü–æ –∑–∞–¥–∞—á–∞–º:\n"
        for task, hours in tasks_summary.items():
            report += f"- {task}: {round(hours, 2)} —á.\n"
        
        query.edit_message_text(report)
    except Exception as e:
        query.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")

def weekly_report(update: Update, context: CallbackContext):
    generate_report(update, context, 7)

def monthly_report(update: Update, context: CallbackContext):
    generate_report(update, context, 30)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    updater = Updater(TELEGRAM_TOKEN, use_context=True)
    dp = updater.dispatcher
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_spreadsheet_link))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    dp.add_handler(CallbackQueryHandler(start_task, pattern="^start_task$"))
    dp.add_handler(CallbackQueryHandler(weekly_report, pattern="^weekly_report$"))
    dp.add_handler(CallbackQueryHandler(monthly_report, pattern="^monthly_report$"))
    dp.add_handler(CallbackQueryHandler(end_task, pattern="^end_task$"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, task_description))
    
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
