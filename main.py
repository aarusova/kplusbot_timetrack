import os
import re
import logging
from datetime import datetime, timedelta
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler,
    filters,
    ApplicationBuilder,
    TypeHandler
)
import json
from tempfile import NamedTemporaryFile


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
START, TASK_DESCRIPTION, TASK_TAGS = range(3)

TOKEN = os.getenv('TELEGRAM_TOKEN')
if not TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets
SCOPES = [
    'https://www.googleapis.com/auth/spreadsheets',
    'https://www.googleapis.com/auth/drive'
]

initialized_sheets = {}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
def get_google_creds():
    creds_json = os.getenv('GOOGLE_CREDS_JSON')
    if not creds_json:
        raise ValueError("GOOGLE_CREDS_JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    
    try:
        creds_dict = json.loads(creds_json)
        return ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, SCOPES)
    except json.JSONDecodeError:
        raise ValueError("GOOGLE_CREDS_JSON —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON")
    except Exception as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Google creds: {str(e)}")

creds = get_google_creds()
SERVICE_ACCOUNT_EMAIL = creds.service_account_email
client = gspread.authorize(creds)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
user_sheets = {}  # {user_id: {'url': str, 'id': str}}
user_tasks = {}   # {user_id: {'start_time': datetime, 'description': str, 'tags': str}}

async def handle_webhook_update(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫"""
    await application.process_update(update)

def extract_spreadsheet_id(url):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç ID —Ç–∞–±–ª–∏—Ü—ã –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ URL"""
    patterns = [
        r'/spreadsheets/d/([a-zA-Z0-9-_]+)',
        r'/d/([a-zA-Z0-9-_]+)',
        r'^([a-zA-Z0-9-_]+)$'
    ]
    
    for pattern in patterns:
        match = re.search(pattern, url)
        if match:
            return match.group(1)
    
    return None

def get_main_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    keyboard = [
        [InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∑–∞–¥–∞—á—É", callback_data='task_start')],
        [InlineKeyboardButton("–ó–∞–∫–æ–Ω—á–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data='task_end')],
        [InlineKeyboardButton("–û—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é", callback_data='report_week')]
    ]
    return InlineKeyboardMarkup(keyboard)

async def edit_message_without_reply_markup(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    if hasattr(update, 'callback_query'):
        await update.callback_query.edit_message_text(
            text=text,
            reply_markup=None
        )
    else:
        await update.message.reply_text(text)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    logger.info(f"‚ö° –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç {user.id} ({user.full_name})")
    
    await update.message.reply_text(
        "üîÑ –ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
        "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é:",
        reply_markup=get_main_keyboard()
    )
    
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏–π"""
    user_id = update.effective_user.id
    if user_id in user_tasks:
        del user_tasks[user_id]
    
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_main_keyboard()
    )
    return ConversationHandler.END

async def handle_spreadsheet_url(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–∫–∏/ID —Ç–∞–±–ª–∏—Ü—ã"""
    user_id = update.effective_user.id
    user_input = update.message.text.strip()
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–∞–±–ª–∏—Ü—ã
        spreadsheet_id = extract_spreadsheet_id(user_input)
        if not spreadsheet_id:
            await update.message.reply_text(
                "‚ùå –ù–µ –º–æ–≥—É –∏–∑–≤–ª–µ—á—å ID —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–∏."
            )
            return START

        await update.message.reply_text("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ...")
        
        try:
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É
            spreadsheet = client.open_by_key(spreadsheet_id)
            worksheet = spreadsheet.sheet1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ —É–∂–µ —Ç–∞–±–ª–∏—Ü–∞
            if spreadsheet_id not in initialized_sheets:
                headers = worksheet.row_values(1)
                required_headers = ['–î–∞—Ç–∞', '–ù–∞—á–∞–ª–æ', '–ö–æ–Ω–µ—Ü', '–ß–∞—Å—ã', '–ó–∞–¥–∞—á–∞', '–¢–µ–≥–∏']
                
                if not all(header in headers for header in required_headers):
                    # –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º –∏—Ö
                    worksheet.insert_row(required_headers, index=1)
                    initialized_sheets[spreadsheet_id] = True
                else:
                    initialized_sheets[spreadsheet_id] = True
            
            # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ - –¥–æ—Å—Ç—É–ø –µ—Å—Ç—å
            spreadsheet_url = f"https://docs.google.com/spreadsheets/d/{spreadsheet_id}"
            user_sheets[user_id] = {'url': spreadsheet_url, 'id': spreadsheet_id}
            
            await update.message.reply_text(
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Ç–∞–±–ª–∏—Ü–µ: {spreadsheet.title}\n"
                f"üîó {spreadsheet_url}\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –∑–∞–¥–∞—á–∞–º–∏!",
                reply_markup=get_main_keyboard()
            )
            return ConversationHandler.END
            
        except gspread.exceptions.APIError as e:
            if "PERMISSION_DENIED" in str(e):
                await update.message.reply_text(
                    "üîê –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
                    f"1. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞ —Ç–∞–±–ª–∏—Ü—ã\n"
                    f"2. –î–æ–±–∞–≤—å—Ç–µ email: {SERVICE_ACCOUNT_EMAIL}\n"
                    f"3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∞–≤–∞ '–†–µ–¥–∞–∫—Ç–æ—Ä'"
                )
            else:
                await update.message.reply_text(f"üö® –û—à–∏–±–∫–∞ Google API: {str(e)}")
            return START
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–∞–±–ª–∏—Ü—ã: {str(e)}", exc_info=True)
        await update.message.reply_text(
            f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞"
        )
        return START

async def task_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞—á–∏"""
    query = update.callback_query
    await query.answer()
    
    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await query.edit_message_reply_markup(reply_markup=None)
    
    user_id = update.effective_user.id
    if user_id not in user_sheets:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ Google —Ç–∞–±–ª–∏—Ü—É —á–µ—Ä–µ–∑ /start"
        )
        return ConversationHandler.END
    
    now = datetime.now()
    user_tasks[user_id] = {
        'start_time': now,
        'description': None,
        'tags': None
    }
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f"‚è±Ô∏è –ó–∞–¥–∞—á–∞ –Ω–∞—á–∞—Ç–∞ –≤ {now.strftime('%H:%M:%S')}\n"
             "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:"
    )
    return TASK_DESCRIPTION


async def handle_task_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    user_id = update.effective_user.id
    description = update.message.text
    
    if user_id not in user_tasks:
        await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é —á–µ—Ä–µ–∑ /taskstart")
        return ConversationHandler.END
    
    user_tasks[user_id]['description'] = description
    
    await update.message.reply_text(
        "üìù –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n"
        "–ü—Ä–∏–º–µ—Ä: –°–û–í—Ö–û–°, –∏–Ω—Ç–µ—Ä–≤—å—é, –ª–æ–≥–∏, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"
    )
    return TASK_TAGS


async def handle_task_tags(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–≥–æ–≤ –∑–∞–¥–∞—á–∏"""
    user_id = update.effective_user.id
    tags = update.message.text
    
    if user_id not in user_tasks:
        await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏")
        return ConversationHandler.END
    
    user_tasks[user_id]['tags'] = tags
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await update.message.reply_text(
        "–¢–µ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É?",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–î–∞, –∑–∞–≤–µ—Ä—à–∏—Ç—å", callback_data='confirm_end')],
            [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data='cancel_end')]
        ])
    )
    return TASK_TAGS

async def save_task_with_tags(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–¥–∞—á—É —Å —Ç–µ–≥–∞–º–∏"""
    user_id = update.effective_user.id
    tags = update.message.text
    
    if user_id not in user_tasks:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é —á–µ—Ä–µ–∑ /taskstart")
        return ConversationHandler.END
    
    user_tasks[user_id]['tags'] = tags
    return await end_task(update, context)

async def task_end(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    
    if user_id not in user_tasks:
        # 1. –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ (—Ç–µ–∫—Å—Ç –æ—Å—Ç–∞–µ—Ç—Å—è)
        await query.edit_message_reply_markup(reply_markup=None)
        
        # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è",
            reply_markup=get_main_keyboard()  # –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        )
        return ConversationHandler.END
    
    # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ (–µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∞–∫—Ç–∏–≤–Ω–∞)
    if user_tasks[user_id]['description'] and not user_tasks[user_id]['tags']:
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data='skip_tags')]
            ])
        )
        return TASK_TAGS
    
    return await end_task(update, context)
    
async def skip_tags(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞ —Ç–µ–≥–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    if user_id in user_tasks:
        user_tasks[user_id]['tags'] = ''
    
    return await end_task(update, context)

async def end_task(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
    user_id = update.effective_user.id
    
    if user_id not in user_tasks or not user_tasks[user_id]['description']:
        if hasattr(update, 'callback_query'):
            await update.callback_query.edit_message_text(
                "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
                reply_markup=get_main_keyboard()
            )
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
                reply_markup=get_main_keyboard()
            )
        return ConversationHandler.END
    
    task_data = user_tasks[user_id]
    end_time = datetime.now()
    start_time = task_data['start_time']
    duration = end_time - start_time
    hours = round(duration.total_seconds() / 3600, 2)
    
    try:
        spreadsheet_id = user_sheets[user_id]['id']
        spreadsheet = client.open_by_key(spreadsheet_id)
        worksheet = spreadsheet.sheet1
        
        new_row = [
            start_time.strftime('%Y-%m-%d'),
            start_time.strftime('%H:%M:%S'),
            end_time.strftime('%H:%M:%S'),
            str(hours),
            task_data['description'],
            task_data.get('tags', '')
        ]
        
        worksheet.insert_row(new_row, index=2)
        
        message = (
            f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É!\n"
            f"üìÖ –î–∞—Ç–∞: {new_row[0]}\n"
            f"‚è± –í—Ä–µ–º—è: {new_row[1]} - {new_row[2]} ({hours} —á)\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {new_row[4]}"
        )
        
        if task_data.get('tags'):
            message += f"\nüè∑ –¢–µ–≥–∏: {new_row[5]}"
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}", exc_info=True)
        message = (
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü—É!\n"
            f"–û—à–∏–±–∫–∞: {str(e)}"
        )
        
    finally:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
        if hasattr(update, 'callback_query'):
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=message,
                reply_markup=get_main_keyboard()  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
            )
            # –û—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ—Ç—Ä–æ–Ω—É—Ç—ã–º
        else:
            await update.message.reply_text(
                message,
                reply_markup=get_main_keyboard()  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
            )
        
        if user_id in user_tasks:
            del user_tasks[user_id]
    
    return ConversationHandler.END

async def confirm_end_task(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'confirm_end':
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await query.edit_message_text(
            query.message.text,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
            reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        )
        return await end_task(update, context)
    else:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await query.edit_message_text(
            "–ó–∞–¥–∞—á–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–±–æ—Ç—É!",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END

async def report_week(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é"""
    query = update.callback_query
    await query.answer()
    
    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await query.edit_message_reply_markup(reply_markup=None)
    
    user_id = update.effective_user.id
    if user_id not in user_sheets:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ Google —Ç–∞–±–ª–∏—Ü—É —á–µ—Ä–µ–∑ /start"
        )
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        spreadsheet_id = user_sheets[user_id]['id']
        spreadsheet = client.open_by_key(spreadsheet_id)
        worksheet = spreadsheet.sheet1
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫)
        records = worksheet.get_all_records()
        
        if not records:
            if hasattr(update, 'callback_query'):
                await update.callback_query.answer("–í —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞", show_alert=True)
            else:
                await update.message.reply_text("üìä –í —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
        end_date = datetime.now().date()
        start_date = end_date - timedelta(days=7)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
        filtered_data = []
        for row in records:
            try:
                row_date = datetime.strptime(row['–î–∞—Ç–∞'], '%Y-%m-%d').date()
                if start_date <= row_date <= end_date:
                    filtered_data.append(row)
            except (ValueError, KeyError):
                continue
        
        if not filtered_data:
            if hasattr(update, 'callback_query'):
                await update.callback_query.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é", show_alert=True)
            else:
                await update.message.reply_text("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é")
            return
        
        # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è
        total_hours = sum(float(row['–ß–∞—Å—ã']) for row in filtered_data)
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–µ–≥–∞–º
        tags_summary = {}
        for row in filtered_data:
            tags = [t.strip() for t in row['–¢–µ–≥–∏'].split(',')] if row.get('–¢–µ–≥–∏') else ['–±–µ–∑ —Ç–µ–≥–∞']
            for tag in tags:
                tags_summary[tag] = tags_summary.get(tag, 0) + float(row['–ß–∞—Å—ã'])
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–¥–∞—á–∞–º
        tasks_summary = {}
        for row in filtered_data:
            task = row['–ó–∞–¥–∞—á–∞'][:30] + '...' if len(row['–ó–∞–¥–∞—á–∞']) > 30 else row['–ó–∞–¥–∞—á–∞']
            tasks_summary[task] = tasks_summary.get(task, 0) + float(row['–ß–∞—Å—ã'])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report_lines = [
            f"üìä –û—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é ({start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')})",
            f"‚è± –í—Å–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {total_hours:.1f} —á",
            "",
            "üè∑ –ü–æ —Ç–µ–≥–∞–º:"
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø-5 —Ç–µ–≥–æ–≤
        for tag, hours in sorted(tags_summary.items(), key=lambda x: x[1], reverse=True)[:5]:
            report_lines.append(f"‚Ä¢ {tag}: {hours:.1f} —á")
        
        report_lines.extend(["", "üìù –ü–æ –∑–∞–¥–∞—á–∞–º:"])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø-5 –∑–∞–¥–∞—á
        for task, hours in sorted(tasks_summary.items(), key=lambda x: x[1], reverse=True)[:5]:
            report_lines.append(f"‚Ä¢ {task}: {hours:.1f} —á")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
        report_text = "\n".join(report_lines)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=report_text,
            reply_markup=get_main_keyboard()
        )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}", exc_info=True)
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}"
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=error_msg,
            reply_markup=get_main_keyboard()
        )
           
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'task_start':
        await task_start(update, context)
    elif query.data == 'task_end':
        await query.edit_message_reply_markup(reply_markup=None)
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏..."
        )
        await task_end(update, context)
    elif query.data == 'report_week':
        await report_week(update, context)
    elif query.data == 'report_month':
        await query.edit_message_reply_markup(reply_markup=None)
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü..."
        )
        await report_week(update, context)


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ:", exc_info=context.error)
    
    if isinstance(update, Update):
        if update.message:
            await update.message.reply_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞–ø–∏—à–∏ –ù–∞—Å—Ç–µ."
            )

async def post_init(application: Application):
    await application.bot.set_webhook(f"https://kplusbot-timetrack.onrender.com/{TOKEN}")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω /start –æ—Ç {update.effective_user.id}")  
    await update.message.reply_text("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

def main() -> None:
    TOKEN = os.getenv('TELEGRAM_TOKEN')
    if not TOKEN:
        raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º ApplicationBuilder –¥–ª—è webhook
    application = (
    ApplicationBuilder()
    .token(TOKEN)
    .post_init(post_init)
    .concurrent_updates(True)  # –í–∞–∂–Ω–æ –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤
    .http_version("1.1")       # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å Render
    .get_updates_http_version("1.1")
    .build()
    )
    
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
    start_conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            START: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_spreadsheet_url)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–¥–∞—á
    task_conv_handler = ConversationHandler(
    entry_points=[
        CallbackQueryHandler(task_start, pattern='^task_start$'),
        CallbackQueryHandler(task_end, pattern='^task_end$')
    ],
    states={
        TASK_DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_task_description)],
        TASK_TAGS: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_task_tags),
            CallbackQueryHandler(confirm_end_task, pattern='^(confirm_end|cancel_end)$'),
            CallbackQueryHandler(skip_tags, pattern='^skip_tags$')
        ]
    },
    fallbacks=[CommandHandler('cancel', cancel)]
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(start_conv_handler)
    application.add_handler(task_conv_handler)
    application.add_handler(CommandHandler('taskend', end_task))
    application.add_handler(CommandHandler('reportweek', report_week))
    application.add_handler(CommandHandler('reportmonth', report_week))  # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_error_handler(error_handler)
    application.add_handler(TypeHandler(Update, handle_webhook_update))

    logger.info(f"üîß –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {len(application.handlers)}")

    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_webhook(
        listen="0.0.0.0",  # –°–ª—É—à–∞–µ–º –≤—Å–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
        port=10000,        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è Render
        webhook_url=f"https://kplusbot-timetrack.onrender.com/{TOKEN}",
    )

if __name__ == '__main__':
    main()
